<?php

namespace ride\library\dependency\intelligence;

use ride\library\dependency\DependencyCallArgument;

class DependencyIntelligenceCodeGenerator {

    private $className;

    private $namespace;

    private $fingerprints;

    public function __construct($className = null, $namespace = null) {
        if (!$className) {
            $className = 'DependencyIntelligenceFactory';
        }

        $this->className = $className;
        $this->namespace = $namespace;
        $this->meta = array();
        $this->instances = array();
    }

    public function setMeta(array $meta) {
        $this->meta = $meta;
    }

    public function addInstance($instance) {
        $this->instances[] = $instance;
    }

    public function generateFactory(DependencyIntelligence $dependencyIntelligence) {
        $meta = array();
        $fingerprints = array();
        $methods = array();

        foreach ($this->meta as $instanceId => $instanceMeta) {
            $code = $instanceMeta['code'];

            $fingerprints += $instanceMeta['fingerprints'];
            $methods[$instanceId] = $this->generateFunction($instanceId, $code);
            $meta[$instanceId] = $instanceMeta;
        }

        foreach ($this->instances as $instance) {
            $fingerprint = $instance->getFingerprint();

            $instanceFingerprints = array($fingerprint => true);
            $instanceId = '';
            $id = $instance->getId();

            $interfaces = $instance->getInterfaces();
            foreach ($interfaces as $interface => $null) {
                $fingerprint = $dependencyIntelligence->getFingerprint($interface, $id);

                $instanceFingerprints[$fingerprint] = true;
                $instanceId .= $fingerprint;
            }

            $instanceId = 'r' . substr(md5($instanceId), 0, 64);
            foreach ($instanceFingerprints as $fingerprint => $null) {
                $instanceFingerprints[$fingerprint] = $instanceId;
            }

            if (isset($meta[$instanceId])) {
                $fingerprints += $instanceFingerprints;
                $meta[$instanceId]['fingerprints'] += $instanceFingerprints;
            } else {
                $code = $this->generateInstance($instance);
                if ($code) {
                    $fingerprints += $instanceFingerprints;

                    $methods[$instanceId] = $this->generateFunction($instanceId, $code);
                    $meta[$instanceId] = array(
                        'id' => $id,
                        'interfaces' => array_keys($interfaces),
                        'class' => $instance->getClassName(),
                        'fingerprints' => $instanceFingerprints,
                        'code' => $code,
                    );
                }
            }
        }

        $code = "<?php \n";
        $code .= "\n";
        if ($this->namespace) {
            $code .= 'namespace ' . $this->namespace . ";\n";
            $code .= "\n";
        }
        $code .= "use \\ride\\library\\dependency\\DependencyInjector;\n";
        $code .= "\n";
        $code .= "/**\n";
        $code .= " * This class is generated by ride\\library\\dependency\\intelligence\\DependencyIntelligenceCodeGenerator.\n";
        $code .= " */\n";
        $code .= 'class ' . $this->className . " {\n";
        $code .= "\n";
        $code .= '    private $fingerprints = ' . var_export($fingerprints, true) . ";\n";
        $code .= "\n";
        $code .= '    private $meta = ' . var_export($meta, true) . ";\n";
        $code .= "\n";
        $code .= '    public function getMeta($instanceId = null) {' . "\n";
        $code .= '        if ($instanceId === null) {' . "\n";
        $code .= '            return $this->meta;' . "\n";
        $code .= '        } elseif (isset($this->meta[$instanceId])) {' . "\n";
        $code .= '            return $this->meta[$instanceId];' . "\n";
        $code .= '        } else {' . "\n";
        $code .= '            return false;' . "\n";
        $code .= "        }\n";
        $code .= "    }\n";
        $code .= "\n";
        $code .= '    public function getInstanceId($fingerprint) {' . "\n";
        $code .= '        return isset($this->fingerprints[$fingerprint]) ? $this->fingerprints[$fingerprint] : false;' . "\n";
        $code .= "    }\n";
        $code .= "\n";
        $code .= implode("\n\n", str_replace("\n", "\n    ", $methods));
        $code .= "\n";
        $code .= "\n";
        $code .= "}\n";
        $code .= "\n";
        $code .= '$factory = new ' . $this->className . "();\n";

        return $code;
    }

    private function generateFunction($name, $code) {
        return '    public function ' . $name . '(DependencyInjector $dependencyInjector) {' . "\n    " . str_replace("\n", "\n    ", $code) . "\n}";
    }

    private function generateInstance($instance) {
        $className = $instance->getClassName();
        $factoryInterface = $instance->getFactoryInterface();

        if (!$className && !$factoryInterface) {
            return false;
        } elseif ($factoryInterface) {
            $method = $instance->getFactoryMethod();

            $code = '$factory = $dependencyInjector->get(' . var_export($factoryInterface, true) . ', ' . var_export($instance->getFactoryId(), true) . ");\n";
            $code .= '$instance = $factory->' . $method['method'] . '(' . $this->generateArguments($method['arguments']) . ");\n";
            $code .= "\n" . 'return $instance;';

            return $code;
        }

        $instanceCode = '$instance = new ' . $className . '(';
        $methodCode = '';

        foreach ($instance->getMethods() as $method) {
            if ($method['method'] == '__construct') {
                $instanceCode .= $this->generateArguments($method['arguments']);
            } else {
                $methodCode .= '$instance->' . $method['method'] . '(' . $this->generateArguments($method['arguments']) . ");\n";
            }
        }

        $code = $instanceCode . ");\n";
        foreach ($instance->getInterfaces() as $interface => $dummy) {
            if ($instance->isAnonymous()) {
                $code .= '$dependencyInjector->setInstance($instance, ' . var_export($interface, true) . ");\n";
            }
            $code .= '$dependencyInjector->setInstance($instance, ' . var_export($interface, true) . ', ' . var_export($instance->getId(), true) . ");\n";
        }
        $code .= $methodCode . "\n" . 'return $instance;';

        return $code;
    }

    private function generateArguments(array $arguments) {
        $code = array();

        foreach ($arguments as $argument) {
            if (!$argument instanceof DependencyCallArgument) {
                try {
                    $code[] = var_export($argument, true);
                } catch (\Exception $e) {
                    print_r($argument);
                    throw $e;
                }

                continue;
            }

            $argumentCode = 'null';
            $type = $argument->getType();
            $properties = $argument->getProperties();

            if ($type === 'dependencies') {
                $include = isset($properties['include']) ? $properties['include'] : null;
                $exclude = isset($properties['include']) ? $properties['exclude'] : null;
                if ($include || $exclude) {
                    $argumentCode = '$dependencyInjector->getByTag(' . var_export($properties['interface'], true) . ', ' . var_export($include, true) . ', ' . var_export($exclude, true) . ')';
                } else {
                    $argumentCode = '$dependencyInjector->getAll(' . var_export($properties['interface'], true) . ')';
                }
            } elseif (isset($properties['class']) && isset($properties['method'])) {
                $argumentCode = $properties['class'] . '::' . $properties['method'] . '(' . (isset($properties['arguments']) ? $this->generateArguments($properties['arguments']) : '') . ')';
            } elseif (isset($properties['interface'])) {
                $argumentCode = '$dependencyInjector->get(' . var_export($properties['interface'], true) . ', ' . (isset($properties['id']) ? var_export($properties['id'], true) : 'null') . ')';
                if (isset($properties['method'])) {
                    $argumentCode .= '->' . $properties['method'] . '(' . (isset($properties['arguments']) ? $this->generateArguments($properties['arguments']) : '') . ')';
                }
            }

            $code[] = $argumentCode;
        }

        return implode(', ', $code);
    }

}
